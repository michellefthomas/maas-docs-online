<?xml version="1.0" encoding="utf-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
<head>
<meta charset="utf-8" />

<title>How to Add New Azure Resource Group for New Messaging Services in Private Azure Cloud</title>
<link rel="stylesheet" href="Resources/Stylesheets/MainStyles-full-docs.css" type="text/css" />
</head>
<body>
<div class="document" id="how-to-add-new-azure-resource-group-for-new-messaging-services-in-private-azure-cloud">
<h1 class="title">How to Add New Azure Resource Group for New Messaging Services in Private Azure Cloud</h1>

<div class="section" id="background">
<h1>Background</h1>
<p>If you are an enterprise customer, you may have Solace PubSub+ Cloud configured to use a private access Solace datacenter within your own Azure subscription. To ensure that Solace datacenter’s access to resources within your subscription is restricted, Solace App can be resource group scoped. For any new broker you wish to create via Solace Console, you need to explicitly create the corresponding broker resource group and role assignment.</p>
</div>
<div class="section" id="steps-required">
<h1>Steps Required</h1>
<dl>
<dt>In order to accomplish this, you will need to configure both your Azure Cloud account and Solace PubSub+ Cloud account.</dt>
<dd><ol class="arabic">
<li><p><a href="#id1"><span class="problematic" id="id2">:ref:`Setup the resource group in Azure account and &lt;azuresetup&gt;`</span></a></p>
<div class="system-message" id="id1">
<p class="system-message-title">System Message: ERROR/3 (<span class="docutils literal">c:\GitHub\MT-maas-docs-online\docs\group_howto\ght_add_resource_group_scoping.rst</span>, line 11); <em><a href="#id2">backlink</a></em></p>
<p>Unknown interpreted text role "ref".</p>
</div>
</li>
</ol>
<blockquote>
<ul>
<li><p><a href="#id3"><span class="problematic" id="id4">:ref:`Create the resource groups needed for new messaging services.&lt;azuresetup&gt;`</span></a></p>
<div class="system-message" id="id3">
<p class="system-message-title">System Message: ERROR/3 (<span class="docutils literal">c:\GitHub\MT-maas-docs-online\docs\group_howto\ght_add_resource_group_scoping.rst</span>, line 13); <em><a href="#id4">backlink</a></em></p>
<p>Unknown interpreted text role "ref".</p>
</div>
</li>
<li><p><a href="#id5"><span class="problematic" id="id6">:ref:`Configure them so Solace App can access them.&lt;azuresetup&gt;`</span></a></p>
<div class="system-message" id="id5">
<p class="system-message-title">System Message: ERROR/3 (<span class="docutils literal">c:\GitHub\MT-maas-docs-online\docs\group_howto\ght_add_resource_group_scoping.rst</span>, line 14); <em><a href="#id6">backlink</a></em></p>
<p>Unknown interpreted text role "ref".</p>
</div>
</li>
</ul>
</blockquote>
<ol class="arabic" start="2">
<li><p><a href="#id7"><span class="problematic" id="id8">:ref:`Register the newly added resource group with Solace PubSub+ Cloud.&lt;solacesetup&gt;`</span></a></p>
<div class="system-message" id="id7">
<p class="system-message-title">System Message: ERROR/3 (<span class="docutils literal">c:\GitHub\MT-maas-docs-online\docs\group_howto\ght_add_resource_group_scoping.rst</span>, line 16); <em><a href="#id8">backlink</a></em></p>
<p>Unknown interpreted text role "ref".</p>
</div>
</li>
</ol>
<blockquote>
<ul class="simple">
<li><p>Register the resource groups in PubSub+ Cloud so services will now use them.</p></li>
<li><p>Query for a list of resource groups that are used by services</p></li>
<li><p>Query for a list of available resource groups registered with PubSub+ Cloud</p></li>
</ul>
</blockquote>
</dd>
</dl>
</div>
<div class="section" id="assumptions">
<h1>Assumptions</h1>
<p>The tutorial assumes you</p>
<ul class="simple">
<li><p>have azure cli knowledge and owner permission to create resource groups and role assignment</p></li>
<li><p>familiar with REST and ability to send REST requests using your favorite tool. It's okay if you don’t. <a class="reference external" href="https://www.restapitutorial.com/lessons/whatisrest.html">Check out this REST intro</a> and then come back.</p></li>
</ul>
<p>What you'll need:</p>
<ul class="simple">
<li><p>Azure cloud shell access
* <a class="reference external" href="https://shell.azure.com/">Access Cloud Shell at https://shell.azure.com/</a>.
* Alternatively use az cli with version &gt;= 2.0.76.  <a class="reference external" href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest">Access az cli installation details https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-lates</a>.</p></li>
<li><p>A Solace PubSub+ Cloud Enterprise Account. As only Enterprise Accounts support multiple users, these REST endpoints cannot be used otherwise.</p></li>
<li><p>Administrator permissions for your account.</p></li>
<li><p>You need a way to send REST messages from your dev environment. Postman (6.1.3 or greater) is a good choice if you want a visual REST API Dev Tool</p></li>
<li><p>Click this <a class="reference external" href="https://documenter.getpostman.com/view/3728825/SW7bzRnP">link to View the Postman collection</a> then hit the “Run in Postman” button.
* Note that if you prefer to use curl, jQuery, PHP, Python, Ruby or others, you can also view the corresponding examples under the <cite>collection &lt;https://documenter.getpostman.com/view/3728825/SW7bzRnP&gt;</cite> by selecting the language of your choice in the right hand side pane.</p></li>
</ul>
</div>
<div class="section" id="azure-setup">
<span id="azuresetup"></span><h1>Azure Setup</h1>
<ol class="arabic simple">
<li><p>Go to  <a class="reference external" href="https://shell.azure.com/">https://shell.azure.com</a>.</p></li>
<li><p>Log in with owner access(or any user with the role that allows the creation of resource group and role assignment) to azure account through cloud shell.</p></li>
<li><p>Upload the bash script below as role-update-custom.sh</p></li>
<li><p>run the bash script with following snippet. Note modify this script according to your need.</p></li>
</ol>
<pre class="code bash literal-block" xml:space="preserve"><code>bash role-update-custom.sh --subscription &lt;sub&gt; --role <span class="literal string double">"&lt;appName&gt;_roleBroker"</span> -rg &lt;resourcegroup&gt; -u &lt;appId&gt;</code></pre>
<dl class="option-list">
<dt><kbd><span class="option">-r<var>esourcegroup</var></span></kbd></dt>
<dd><p>the name of the azure resource group for a messaging service that the customer plan to create a resource group for</p>
</dd>
<dt><kbd><span class="option">-a<var>ppName</var></span></kbd></dt>
<dd><p>the name of the azure Solace app setup for Solace Cloud Access</p>
</dd>
<dt><kbd><span class="option">-a<var>ppId</var></span></kbd></dt>
<dd><p>the clientId or the application Id for the azure Solace app</p>
</dd>
</dl>
<p>role-update-custom.sh</p>
<pre class="code bash literal-block" xml:space="preserve"><code><span class="comment hashbang">#!/bin/bash
</span><span class="name builtin">set</span> -e
usage<span class="operator">()</span>  <span class="operator">{</span>  
  <span class="name builtin">echo</span>  <span class="literal string double">"Usage: </span><span class="literal string interpol">${</span><span class="name variable">0</span><span class="literal string interpol">}</span><span class="literal string double"> --subscription&lt;subscription -U &lt;app-name&gt; --role &lt;role-name&gt; -rg resourcegroup "</span>  <span class="operator">&amp;&amp;</span>  <span class="name builtin">exit</span>  
<span class="operator">}</span>  
<span class="name variable">location</span><span class="operator">=</span>eastus2
<span class="keyword">while</span>  <span class="operator">[</span>  <span class="literal string double">"</span><span class="name variable">$1</span><span class="literal string double">"</span> !<span class="operator">=</span>  <span class="literal string double">""</span>  <span class="operator">]</span><span class="punctuation">;</span>  <span class="keyword">do</span>  
    <span class="keyword">case</span>  <span class="name variable">$1</span> in
        -s <span class="punctuation">|</span> --subscription<span class="operator">)</span>  
            <span class="name builtin">shift</span>  
            <span class="name variable">subscription</span><span class="operator">=</span><span class="name variable">$1</span>  
            <span class="punctuation">;;</span>
        -rg <span class="punctuation">|</span> --resourcegroup<span class="operator">)</span>  
            <span class="name builtin">shift</span>  
            <span class="name variable">resourcegroup</span><span class="operator">=</span><span class="name variable">$1</span>  
            <span class="punctuation">;;</span>
        -r <span class="punctuation">|</span> --role<span class="operator">)</span>  
            <span class="name builtin">shift</span>  
            <span class="name variable">role</span><span class="operator">=</span><span class="name variable">$1</span>  
            <span class="punctuation">;;</span>
        -u <span class="punctuation">|</span> --servicep<span class="operator">)</span>  
            <span class="name builtin">shift</span>  
            <span class="name variable">servicep</span><span class="operator">=</span><span class="name variable">$1</span>  
                <span class="punctuation">;;</span>

        -l <span class="punctuation">|</span> --location<span class="operator">)</span>  
            <span class="name builtin">shift</span>  
            <span class="name variable">location</span><span class="operator">=</span><span class="name variable">$1</span>  
                <span class="punctuation">;;</span>  
    <span class="keyword">esac</span>  
    <span class="name builtin">shift</span>  
<span class="keyword">done</span>  

<span class="keyword">if</span>  <span class="operator">[</span> -z <span class="literal string double">"</span><span class="literal string interpol">${</span><span class="name variable">subscription</span><span class="literal string interpol">}</span><span class="literal string double">"</span>  <span class="operator">]</span><span class="punctuation">;</span>  <span class="keyword">then</span>  
  <span class="name builtin">echo</span>  <span class="literal string double">"error: Parameter 'subscription' required"</span>  <span class="operator">&amp;&amp;</span> usage
<span class="keyword">fi</span>  

<span class="keyword">if</span>  <span class="operator">[</span> -z <span class="literal string double">"</span><span class="literal string interpol">${</span><span class="name variable">servicep</span><span class="literal string interpol">}</span><span class="literal string double">"</span>  <span class="operator">]</span><span class="punctuation">;</span>  <span class="keyword">then</span>  
  <span class="name builtin">echo</span>  <span class="literal string double">"error: Parameter 'servicep' required"</span>  <span class="operator">&amp;&amp;</span> usage
<span class="keyword">fi</span>  

<span class="keyword">if</span>  <span class="operator">[</span> -z <span class="literal string double">"</span><span class="literal string interpol">${</span><span class="name variable">resourcegroup</span><span class="literal string interpol">}</span><span class="literal string double">"</span>  <span class="operator">]</span><span class="punctuation">;</span>  <span class="keyword">then</span>  
  <span class="name builtin">echo</span>  <span class="literal string double">"error: Parameter 'resourcegroup' required"</span>  <span class="operator">&amp;&amp;</span> usage
<span class="keyword">fi</span>  
<span class="keyword">if</span>  <span class="operator">[</span> -z <span class="literal string double">"</span><span class="literal string interpol">${</span><span class="name variable">role</span><span class="literal string interpol">}</span><span class="literal string double">"</span>  <span class="operator">]</span><span class="punctuation">;</span>  <span class="keyword">then</span>  
  <span class="name builtin">echo</span>  <span class="literal string double">"error: Parameter 'role' required"</span>  <span class="operator">&amp;&amp;</span> usage
<span class="keyword">fi</span>  

<span class="name variable">roleId</span><span class="operator">=</span><span class="keyword">$(</span>az role definition list --custom-role-only  --query <span class="literal string double">"[?roleName=='</span><span class="literal string interpol">${</span><span class="name variable">role</span><span class="literal string interpol">}</span><span class="literal string double">'].{id:id}"</span> --output tsv<span class="keyword">)</span>  
<span class="name variable">roleGenName</span><span class="operator">=</span><span class="keyword">$(</span>az role definition list --custom-role-only  --query <span class="literal string double">"[?roleName=='</span><span class="literal string interpol">${</span><span class="name variable">role</span><span class="literal string interpol">}</span><span class="literal string double">'].{name:name}"</span> --output tsv<span class="keyword">)</span>  
<span class="name variable">subscriptionId</span><span class="operator">=</span><span class="keyword">$(</span>az account show --subscription <span class="literal string interpol">${</span><span class="name variable">subscription</span><span class="literal string interpol">}</span> --query <span class="literal string single">'id'</span> -o tsv<span class="keyword">)</span>  
<span class="comment single">#scopes=$(az role definition list --custom-role-only  --query "[?roleName=='${role}'].{assignableScopes:assignableScopes[0]}" -o tsv)
</span><span class="name variable">scopelist</span><span class="operator">=(</span><span class="keyword">$(</span>az role definition list --custom-role-only  --query <span class="literal string double">"[?roleName=='</span><span class="literal string interpol">${</span><span class="name variable">role</span><span class="literal string interpol">}</span><span class="literal string double">'].assignableScopes[]"</span><span class="keyword">)</span><span class="operator">)</span>  
<span class="name variable">scopes</span><span class="operator">=</span><span class="literal string double">"nothing"</span>  
<span class="name variable">testoutput</span><span class="operator">=</span><span class="keyword">$(</span>az role definition list --custom-role-only  --query <span class="literal string double">"[?roleName=='</span><span class="literal string interpol">${</span><span class="name variable">role</span><span class="literal string interpol">}</span><span class="literal string double">'].assignableScopes[]"</span>  <span class="punctuation">|</span>  jq -c <span class="literal string single">'.'</span><span class="keyword">)</span>  

<span class="comment single">#//create group first
</span>az group create --location <span class="name variable">$location</span> --name <span class="literal string interpol">${</span><span class="name variable">resourcegroup</span><span class="literal string interpol">}</span>  
<span class="name builtin">echo</span>  <span class="name variable">$resourcegroup</span> created


<span class="keyword">for</span> i in <span class="literal string double">"</span><span class="literal string interpol">${</span><span class="name variable">scopelist</span><span class="punctuation">[@]</span><span class="literal string interpol">}</span><span class="literal string double">"</span>  
<span class="keyword">do</span>  
  <span class="keyword">if</span>  <span class="operator">[</span>  <span class="name variable">$i</span> !<span class="operator">=</span>  <span class="literal string single">'['</span>  <span class="operator">]</span>  
  <span class="keyword">then</span>  
    <span class="keyword">if</span>  <span class="operator">[</span>  <span class="name variable">$i</span> !<span class="operator">=</span>  <span class="literal string single">']'</span>  <span class="operator">]</span><span class="punctuation">;</span>  <span class="keyword">then</span>  
        <span class="keyword">if</span>  <span class="operator">[</span>  <span class="literal string double">"</span><span class="name variable">$scopes</span><span class="literal string double">"</span> !<span class="operator">=</span>  <span class="literal string double">"nothing"</span>  <span class="operator">]</span><span class="punctuation">;</span>  <span class="keyword">then</span>  
              <span class="name variable">scopes</span><span class="operator">=</span><span class="literal string double">"</span><span class="literal string interpol">${</span><span class="name variable">scopes</span><span class="literal string interpol">}</span><span class="literal string double">  </span><span class="name variable">$i</span><span class="literal string double">"</span>  
        <span class="keyword">else</span>  
              <span class="name variable">scopes</span><span class="operator">=</span><span class="literal string interpol">${</span><span class="name variable">i</span><span class="literal string interpol">}</span>  
        <span class="keyword">fi</span>  
    <span class="keyword">fi</span>  
  <span class="keyword">fi</span>  
<span class="keyword">done</span>  

<span class="comment single">#echo "scopes after setting ${scopes} "
</span><span class="name variable">scopes</span><span class="operator">=</span><span class="literal string double">"\"/subscriptions/</span><span class="literal string interpol">${</span><span class="name variable">subscriptionId</span><span class="literal string interpol">}</span><span class="literal string double">/resourceGroups/</span><span class="literal string interpol">${</span><span class="name variable">resourcegroup</span><span class="literal string interpol">}</span><span class="literal string double">\", </span><span class="literal string interpol">${</span><span class="name variable">scopes</span><span class="literal string interpol">}</span><span class="literal string double">"</span>  
<span class="name builtin">echo</span>  <span class="literal string double">"update role </span><span class="literal string interpol">${</span><span class="name variable">roleGenName</span><span class="literal string interpol">}</span><span class="literal string double">"</span>  
<span class="name builtin">echo</span>  <span class="literal string double">"update to scopes  </span><span class="literal string interpol">${</span><span class="name variable">scopes</span><span class="literal string interpol">}</span><span class="literal string double">"</span>  
<span class="comment single">#echo ${testoutput}
</span>  
<span class="name variable">roleDef</span><span class="operator">=</span><span class="literal string single">'{
  "id": "'</span><span class="literal string interpol">${</span><span class="name variable">roleId</span><span class="literal string interpol">}</span><span class="literal string single">'",
  "name": "'</span><span class="literal string interpol">${</span><span class="name variable">roleGenName</span><span class="literal string interpol">}</span><span class="literal string single">'",
    "IsCustom": "true",
    "Description": "Solace Cloud Role for ",
    "roleName": "'</span><span class="literal string interpol">${</span><span class="name variable">role</span><span class="literal string interpol">}</span><span class="literal string single">'",
    "roleType": "CustomRole",
    "type": "Microsoft.Authorization/roleDefinitions",
    "Actions": [
        "Microsoft.Authorization/locks/*",
        "Microsoft.Resources/deployments/*",
        "Microsoft.Resources/subscriptions/resourceGroups/*",
        "Microsoft.Compute/images/*",
        "Microsoft.Compute/*/read",
        "Microsoft.Compute/snapshots/*",
        "Microsoft.Compute/disks/*",
        "Microsoft.Compute/virtualMachines/*",
        "Microsoft.Compute/availabilitySets/*",
        "Microsoft.Insights/Metrics/*",
        "Microsoft.Insights/MetricDefinitions/*",
        "Microsoft.Network/networkInterfaces/*",
        "Microsoft.Network/loadBalancers/*",
        "Microsoft.Network/networkSecurityGroups/*",
        "Microsoft.Network/locations/usages/read",
        "Microsoft.Network/virtualNetworks/*",
        "Microsoft.Network/publicIPAddresses/*",
        "Microsoft.Storage/storageAccounts/*"
    ],
  "NotActions": [],
  "DataActions": [],
  "NotDataActions": [],
  "AssignableScopes": ['</span><span class="literal string interpol">${</span><span class="name variable">scopes</span><span class="literal string interpol">}</span><span class="literal string single">']
}'</span>
az role definition update --role-definition <span class="literal string double">"</span><span class="name variable">$roleDef</span><span class="literal string double">"</span>  
<span class="name builtin">echo</span>  <span class="literal string double">"role updated"</span> with new def

<span class="name builtin">echo</span>  <span class="literal string double">"attempting assigning role --role </span><span class="literal string interpol">${</span><span class="name variable">roleGenName</span><span class="literal string interpol">}</span><span class="literal string double"> --assignee </span><span class="literal string interpol">${</span><span class="name variable">servicep</span><span class="literal string interpol">}</span><span class="literal string double"> --resource-group </span><span class="literal string interpol">${</span><span class="name variable">resourcegroup</span><span class="literal string interpol">}</span><span class="literal string double">"</span>
az role assignment create --role <span class="literal string interpol">${</span><span class="name variable">roleGenName</span><span class="literal string interpol">}</span> --assignee <span class="literal string interpol">${</span><span class="name variable">servicep</span><span class="literal string interpol">}</span> --resource-group <span class="literal string interpol">${</span><span class="name variable">resourcegroup</span><span class="literal string interpol">}</span>  
<span class="name builtin">echo</span>  <span class="literal string double">"role assigned to the app "</span>  <span class="name variable">$servicep</span></code></pre>
<div class="admonition note">
<p class="admonition-title">Note</p>
<dl class="simple">
<dt>This script does the following:</dt>
<dd><ol class="arabic simple">
<li><p>create the resourcegroup if doesn't exist</p></li>
<li><p>query and update the assigned scope list for Solace custom role(&lt;appname&gt;_roleBroker). AssignableScopes for the role will be amended to contain the new resource group name.</p></li>
<li><p>assign the role to the solace app.</p></li>
</ol>
</dd>
</dl>
</div>
<p>Some times role assignment step may fail as azure's custom role update may take time to propagate. In this case, please wait a minute and try to re run the command with values outputted from failed script</p>
<pre class="code python literal-block" xml:space="preserve"><code><span class="name">az</span>  <span class="name">role</span>  <span class="name">assignment</span>  <span class="name">create</span>  <span class="operator">--</span><span class="name">role</span>  <span class="operator">&lt;</span><span class="name">Role</span>  <span class="literal string single">'s azure name&gt; --assignee &lt;Solace App Id&gt; --resource-group &lt;Resource Group Name&gt;</span></code></pre>
<p>You may want to setup multiple resource groups at same time.</p>
<p>This will complete Azure side of setup. The following sections will show you how to register the newly created resource group in Solace Cloud.</p>
</div>
<div class="section" id="solace-setup">
<span id="solacesetup"></span><h1>Solace Setup</h1>
<p>In order to create new message service with the newly created resource group, it needs to be registered to Solace Cloud through Solace API. Once a token is generated, you would be able to register and query the resource groups associated to a datacenter.</p>
</div>
<div class="section" id="create-an-api-token">
<h1>Create an API Token</h1>
<p>You need an API token to authenticate and authorize REST requests. When creating an API token, you will configure what permissions it has (i.e., a subset of the permissions you have when you log in to Solace Cloud)</p>
<ol class="arabic simple">
<li><p>Log in to Solace Cloud</p></li>
<li><p>Click on your name in the right side of the menu bar to navigate to Token Management.</p></li>
</ol>
<a class="reference external image-reference" href="https://console.solace.cloud/api-tokens"><img alt="../img/userApi_1.png" src="Resources/Images/userApi_1.png" /></a>
<ol class="arabic simple" start="3">
<li><p>Click the “Create Token” button</p></li>
</ol>
<a class="reference external image-reference" href="https://console.solace.cloud/api-tokens"><img alt="../img/userApi_2.png" src="Resources/Images/userApi_2.png" /></a>
<ol class="arabic simple" start="4">
<li><p>Give the Token a name and enable these permissions:</p></li>
</ol>
<blockquote>
<ul class="simple">
<li><p>Get Resource Group</p></li>
<li><p>Add Resource Group</p></li>
<li><p>Delete Resource Group (optional, depending on use case)</p></li>
</ul>
<p>Note: If you don't see these permissions listed in the Create Token menu, you may not have adequate (administrator) permissions for your account. Touch base with your account administrator to request access, or contact PubSub+ Cloud support if there is a problem with your permissions.</p>
</blockquote>
<ol class="arabic simple" start="5">
<li><p>Click the “Generate Token” button</p></li>
<li><p>Copy the token to your clipboard by clicking the “Copy” button. <strong>Note:</strong> You will not see this again for security reasons. If you lose the token, you can always regenerate the token or create a new one.</p></li>
<li><p>Set up Postman Collection Authorization – In order for Postman to send REST to Solace Cloud, you need to set the token you just created</p></li>
</ol>
<blockquote>
<ol class="loweralpha simple">
<li><p>Set the Postman Environment to <strong>Solace PubSub+ Cloud</strong> -- look in the drop down in the upper left part of the Postman window.</p></li>
</ol>
<img alt="../img/userApi_4.png" src="Resources/Images/userApi_4.png" />
<ol class="loweralpha simple" start="2">
<li><p>Edit the Solace PubSub+ Cloud environment and set the token by clicking on eye icon next to the environment drop down. Then click Edit next to <strong>Solace PubSub+ Environment</strong>.</p></li>
<li><p>Paste the token in the value field of the <strong>maas_user_token</strong> key and then click Update.</p></li>
</ol>
<img alt="../img/userApi_5.png" src="Resources/Images/userApi_5.png" />
</blockquote>
<p><strong>Great!</strong> Now we have a token, and Postman is set up to use it!</p>
<p>Let’s use it to have some fun.</p>
</div>
<div class="section" id="register-the-resource-groups-with-solace-cloud">
<h1>Register the resource groups with Solace Cloud</h1>
<p>Now that we have a token, we can use it call the user REST endpoint to register a resource group.</p>
<ol class="arabic simple">
<li><p>In the Postman Collection “<em>Resource Group Management For Private Datacenters</em>”, select the request “<strong>Register Resource Group</strong>”</p></li>
<li><p>Change the 'resourcegroupname' field to the resource group you wish to register, press enter</p></li>
<li><p>Change the 'datacenterId' field to the datacenterId you wish to add resource group to, then click on the Send button</p></li>
</ol>
<p>You should see a JSON response confirming that the resource group has been registered and is unused</p>
<p>Now go back to the Solace Cloud Account Management page and you should the invited user.</p>
<p>Awesome! You have just registered a resource group. Now you may want query all the existing resource group to see how they are used.</p>
</div>
<div class="section" id="get-list-of-all-resource-group">
<h1>Get list of all resource group</h1>
<p>Now let’s see a list of all resource group for a datacenter. You will need to know your datacenterId for this operation.</p>
<p>In the Postman Collection “<em>Resource Group Management For Private Datacenters</em>”, select the request “<strong>Query for a list resource group for a datacenter</strong>”. Press send.</p>
<p>You should be able to see a list of pagnated resource group. Parameter status can be passed in to query for specific state of resource groups.</p>
<p>-status=available see all resource groups has not yet been assigned to a service.
-status=used see only resource groups that has not been assigned to a service.</p>
</div>
<div class="section" id="delete-a-resource-group">
<h1>Delete a Resource Group</h1>
<p>Now if we have incorrectly added a resource group and it has not been used by a service yet, we may want to clean up.</p>
<p>In the Postman Collection “<em>Resource Group Management For Private Datacenters</em>”, select the request “<strong>Delete a resource group</strong>”. Press send.</p>
<p>You should receive a 200 OK response confirming that the delete request was accepted.</p>
<div class="section" id="installing-postman">
<h2>Installing Postman</h2>
<p>If you don’t have Postman installed when you hit “Run in Postman”, it will prompt you to install it (which doesn’t take long). Once Postman is installed, you will need to shut it down and click on the “Run in Postman” link again to import the Postman collection.
If you prefer using CURL, the Postman link above provides the sample CURL commands.</p>
</div>
</div>
<div class="section" id="creating-a-message-broker">
<h1>Creating a Message Broker</h1>
<p>The moment you've all been waiting for. If you have succesfully completed the azure portion and then succesfully registered the resource group with Solace, you can now create message brokers!</p>
<p>This is now done as it normally is via the Solace Console or REST calls to the Solace API.</p>
<p>Note: Each broker within that datacenter will use up a resource group that you have created and registered. If you run out of resource groups, more will need to be created and registered.</p>
</div>
</div>
</body>
</html>